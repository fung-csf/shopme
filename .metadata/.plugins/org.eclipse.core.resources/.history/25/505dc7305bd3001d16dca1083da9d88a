package com.shopme.admin;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.shopme.admin.paging.PagingAndSortingArgumentResolver;

@Configuration
public class MvcConfig implements WebMvcConfigurer {

	/*
	 * In short, we can tell Spring MVC to map a given URL (e.g. "/user-photos") to
	 * any directory (e.g. D:/ShopmeProject/ShopmeBackend/user-photos) and expose
	 * the resources (images, js, css...) in this directory to the web clients
	 * (browsers) - that's the primary purpose of using resource handlers in Spring
	 * MVC.
	 * 
	 * Because the assets are not located in the src/main/resources/static folder
	 */

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {

		exposeDirectory("user-photos", registry);
		exposeDirectory("../category-images", registry);
		exposeDirectory("../brand-logos", registry);
		exposeDirectory("../product-images", registry);
		exposeDirectory("../site-logo", registry);

	}

	private void exposeDirectory(String pathPattern, ResourceHandlerRegistry registry) {
		Path path = Paths.get(pathPattern);
		String absolutePath = path.toFile().getAbsolutePath();

		// add /** to allow all files under this directory to be available to client
		String logicalPath = pathPattern.replace("../", "") + "/**";

		registry.addResourceHandler(logicalPath).addResourceLocations("file:/" + absolutePath + "/");
	}

	@Override
	public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
		// TODO Auto-generated method stub
		resolvers.add(new PagingAndSortingArgumentResolver());
	}

	
	
	
}
